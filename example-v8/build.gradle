plugins {
    // need to use Gretty here because of https://github.com/johndevs/gradle-vaadin-plugin/issues/317
    id "org.akhikhl.gretty" version "1.4.2"
    id 'fi.jasoft.plugin.vaadin' version '1.1.11'
}

apply plugin: 'war'
apply plugin: 'kotlin'

// don't update Jetty carelessly, it tends to break Atmosphere and Push support!
// test before commit :-)
// see https://github.com/vaadin/framework/issues/8134 for details
ext.jettyVer = '9.4.2.v20170220'

vaadin {
    version vaadin8_version
    manageDependencies = false  // 'true' doesn't work with Gretty - Gretty won't pull in Vaadin dependencies on appRun and will crash because of missing widgetset
    // have to use Gretty here, disable Vaadin Gradle Plugin jetty support for now
//    logToConsole = true
//    vaadinRun {
//        server = 'jetty'
//    }
}

gretty {
    contextPath = '/'
}

dependencies {
    compile(project(":karibu-dsl-v8"))

    // logging
    // currently we are logging through the SLF4J API to LogBack. See src/main/resources/logback.xml file for the logger configuration
    compile 'ch.qos.logback:logback-classic:1.2.3'
    compile 'org.slf4j:slf4j-api:1.7.25'
    // this will allow us to configure Vaadin to log to SLF4J
    compile 'org.slf4j:jul-to-slf4j:1.7.25'

    // Vaadin
    compile "com.vaadin:vaadin-client-compiled:$vaadin8_version"
    compile "com.vaadin:vaadin-server:$vaadin8_version"
    compile "com.vaadin:vaadin-themes:$vaadin8_version"
    providedCompile 'javax.servlet:javax.servlet-api:3.1.0'

    // validation
    compile 'javax.validation:validation-api:1.0.0.GA'  // so that the BeanFieldGroup will perform JSR303 validations
    compile 'org.hibernate:hibernate-validator:5.4.1.Final'
    // http://stackoverflow.com/questions/24386771/javax-validation-validationexception-hv000183-unable-to-load-javax-el-express
    compile 'org.glassfish.web:javax.el:2.2.6'

    // @todo mavi add Material Theme and Gradle Theme Compiler

    // easy development with Jetty
    testCompile "org.eclipse.jetty:jetty-webapp:$jettyVer"
    testCompile "org.eclipse.jetty:jetty-annotations:$jettyVer"
    // workaround for https://github.com/Atmosphere/atmosphere/issues/978
    testCompile "org.eclipse.jetty:jetty-continuation:$jettyVer"
    // make sure that JSR356 is on classpath, otherwise Atmosphere will use native Jetty Websockets which will result
    // in ClassNotFoundException: org.eclipse.jetty.websocket.WebSocketFactory$Acceptor
    // since the class is no longer there in Jetty 9.4
    testCompile "org.eclipse.jetty.websocket:javax-websocket-server-impl:$jettyVer"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"

    // Embedded Undertow is currently unsupported since it has no servlet/listener/... autodiscovery capabilities:
    // http://stackoverflow.com/questions/22307748/deploying-servlets-webapp-in-embedded-undertow

    // Embedded Tomcat is currently unsupported since it always starts its own class loader which is only known on Tomcat start time
    // and we can't thus discover and preload JPA entities.
}
